{"version":3,"sources":["connection.tsx","assets/images/phara_bg.png","assets/images/gif1.gif","assets/images/checkgreen.png","MintCountdown.tsx","MintButton.tsx","assets/images/simple.png","assets/images/gif2.gif","assets/images/gif3.gif","components/Faq.tsx","Home.tsx","assets/images/logo.png","components/Header.tsx","components/Footer.tsx","components/AnNFT.tsx","hooks/useWalletNFTs.ts","components/MyNFT.tsx","App.tsx","reportWebVitals.ts","index.tsx","utilsweb.ts","candy-machine.ts"],"names":["SequenceType","DEFAULT_TIMEOUT","getErrorForTransaction","connection","txid","a","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","log","m","regex","exec","index","lastIndex","length","push","sendTransactions","wallet","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","beforeTransactions","afterTransactions","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","transaction","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","partiallySignedTransactions","filter","t","signatures","find","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","console","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","StopOnFailure","Promise","all","number","txs","result","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","awaitTransactionSignatureConfirmation","confirmation","Error","err","getUnixTs","Date","getTime","timeout","startTime","done","sleep","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","marginBottom","fontWeight","item","MintCountdown","date","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","MintButton","styled","Button","onMint","candyMachine","isMinting","setIsMinting","isActive","useWallet","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","mint","removeAccountChangeListener","previousGatewayStatus","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","state","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","findGatewayToken","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","Faq","loading","src","gif3","alt","simple","gif1","gif2","BootstrapDialog","mstyled","Dialog","BootstrapDialogTitle","props","children","onClose","other","DialogTitle","sx","p","IconButton","position","right","top","palette","grey","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","goLiveDate","anchor","undefined","Home","isUserMinting","setIsUserMinting","setCandyMachine","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","useMemo","React","setOpen","handleClose","refreshCandyMachineState","useCallback","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","valid","parseInt","amount","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","program","provider","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","tokenMint","mode","burnEveryTime","expireOnUse","noHide","document","getElementById","click","connected","createAccountsForMint","setupMint","txTimeout","mintOneToken","mintOne","mintTxId","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","id","Container","autoFocus","placeholder","type","maxWidth","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","price","align","CANDY_MACHINE_PROGRAM","clusterUrl","handleTransaction","broadcastTransaction","autoShowModal","val","Snackbar","autoHideDuration","Alert","DialogContent","dividers","green_check","href","target","rel","DialogActions","dots","infinite","autoplay","speed","slidesToShow","slidesToScroll","responsive","breakpoint","settings","blur","bgImage","bgimg","bgImageAlt","strength","Header","colorChange","setColorchange","addEventListener","scrollY","Navbar","expand","Brand","title","logo","Toggle","Collapse","Nav","Item","to","role","DropdownButton","Dropdown","Footer","year","getFullYear","AnNFT","nft","image","description","name","attributes","trait_type","Connection","process","useWalletNfts","isLoading","setIsLoading","nfts","setNfts","getNFTsForOwner","nftsForOwner","MyNFT","Box","createTheme","getCandyMachineId","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","cleanupInstructions","whitelistToken","whitelistBurnAuthority","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","ownerAddress","allTokens","getParsedTokenAccountsByOwner","tokenAccounts","tokenAccount","tokenAmount","parsed","info","decimals","pda","getParsedAccountInfo","accountInfo","Metadata","symbol","uri","dataRes","json"],"mappings":"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","file":"static/js/main.8c278c74.chunk.js","sourcesContent":["import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions,\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i),\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log('Failed at txn index:', i);\n        console.log('Caught failure:', e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (instructions instanceof Transaction) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","export default __webpack_public_path__ + \"static/media/phara_bg.65c5ce6e.png\";","export default __webpack_public_path__ + \"static/media/gif1.42f23aad.gif\";","export default __webpack_public_path__ + \"static/media/checkgreen.faf20032.png\";","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\n\nexport const CTAButton = styled(Button)`\n\n\tmargin-top: 10px;\n\tmargin-bottom: 5px;\n\tbackground: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n\tcolor: black;\n\tfont-size: 16px;\n\tfont-weight: bold;\n\n\tbackground: linear-gradient(85.69deg, #ee0edd -7.78%, #8c0782 108.47%);\n\tborder-radius: 14px;\n\t-webkit-border-radius: 14px;\n\tborder: none;\n\tcolor: #eeeeee;\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tfont-family: \"PressStart2P-Regular\", Fallback, sans-serif;\n\tfont-size: 35px;\n\tpadding: 1vh 2vw;\n\ttext-align: center;\n\ttext-decoration: none;\n\twidth: 269px;\n\theight: 80px;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINT';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find(state => previousGatewayStatus === state) &&\n      !invalidToStates.find(state => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <Button\n      className='glow-on-hover mint-button mt-30'\n      // disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log('after: ', gatewayStatus);\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </Button>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","export default __webpack_public_path__ + \"static/media/simple.713a8c60.png\";","export default __webpack_public_path__ + \"static/media/gif2.d505114a.gif\";","export default __webpack_public_path__ + \"static/media/gif3.77adee0a.gif\";","import simple from \"../assets/images/simple.png\";\n\nimport gif1 from \"../assets/images/gif1.gif\";\nimport gif2 from \"../assets/images/gif2.gif\";\nimport gif3 from \"../assets/images/gif3.gif\";\n\nconst Faq = () => {\n  return (\n    <div className=\"row\">\n      <div className=\"container\">\n        <div className=\"col-md-12 col-sm-12 col-xs-12 mb-4 medium-padding50\">\n          <h1 className=\"animated-gradient-text2\">Bit Ducks Collection</h1>\n          <p>Limited collection of 3,333 Bit Duckz</p>\n          <p>All NFTs are unique</p>\n        </div>\n\n        <div className=\"row align-center\">\n          <div className=\"col-lg-6 col-sm-12 col-xs-12 text-center mb-20\">\n            <div className=\"glow-on-hover-img\">\n              <img\n                className=\"border-r24\"\n                loading=\"lazy\"\n                width=\"350\"\n                height=\"350\"\n                src={gif3}\n                alt=\"dev\"\n              />\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-sm-12 col-xs-12 mb-5\">\n            <h3>\n              <b>Lorem ipsum dolor sit amet</b>\n            </h3>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis ac\n              tortor pellentesque, commodo risus quis, semper lacus. Vivamus\n              finibus at metus vel fringilla. Aliquam ut mauris felis.\n              Suspendisse potenti.\n            </p>\n          </div>\n        </div>\n        <div>\n          <img loading=\"lazy\" width=\"100%\" src={simple} alt=\"dev\" />\n        </div>\n        <div className=\"row align-center mt-50\">\n          <div className=\"col-lg-6 col-sm-12 col-xs-12 text-center mobile-only mb-20\">\n            <div className=\"glow-on-hover-img\">\n              <img\n                className=\"border-r24\"\n                loading=\"lazy\"\n                width=\"350\"\n                height=\"350\"\n                src={gif1}\n                alt=\"dev\"\n              />\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-sm-12 col-xs-12 mb-5\">\n            <h3>\n              <b>Lorem ipsum dolor sit amet</b>\n            </h3>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis ac\n              tortor pellentesque, commodo risus quis, semper lacus. Vivamus\n              finibus at metus vel fringilla. Aliquam ut mauris felis.\n              Suspendisse potenti.\n            </p>\n          </div>\n          <div className=\"col-lg-6 col-sm-12 col-xs-12 text-center pc-only\">\n            <div className=\"glow-on-hover-img\">\n              <img\n                className=\"border-r24\"\n                loading=\"lazy\"\n                width=\"350\"\n                height=\"350\"\n                src={gif1}\n                alt=\"dev\"\n              />\n            </div>\n          </div>\n        </div>\n        <div>\n          <img loading=\"lazy\" width=\"100%\" src={simple} alt=\"dev\" />\n        </div>\n        <div className=\"row align-center mt-50\">\n          <div className=\"col-lg-6 col-sm-12 col-xs-12 text-center mb-20\">\n            <div className=\"glow-on-hover-img\">\n              <img\n                className=\"border-r24\"\n                loading=\"lazy\"\n                width=\"350\"\n                height=\"350\"\n                src={gif2}\n                alt=\"dev\"\n              />\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-sm-12 col-xs-12 mb-5\">\n            <h3>\n              <b>Lorem ipsum dolor sit amet</b>\n            </h3>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis ac\n              tortor pellentesque, commodo risus quis, semper lacus. Vivamus\n              finibus at metus vel fringilla. Aliquam ut mauris felis.\n              Suspendisse potenti.\n            </p>\n          </div>\n        </div>\n        <div>\n          <img loading=\"lazy\" width=\"100%\" src={simple} alt=\"dev\" />\n        </div>\n        <div className=\"row align-center mt-50\">\n          <div className=\"col-lg-6 col-sm-12 col-xs-12 text-center mobile-only mb-20\">\n            <div className=\"glow-on-hover-img\">\n              <img\n                className=\"border-r24\"\n                loading=\"lazy\"\n                width=\"350\"\n                height=\"350\"\n                src={gif2}\n                alt=\"dev\"\n              />\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-sm-12 col-xs-12 mb-5\">\n            <h3>\n              <b>Lorem ipsum dolor sit amet</b>\n            </h3>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis ac\n              tortor pellentesque, commodo risus quis, semper lacus. Vivamus\n              finibus at metus vel fringilla. Aliquam ut mauris felis.\n              Suspendisse potenti.\n            </p>\n          </div>\n          <div className=\"col-lg-6 col-sm-12 col-xs-12 text-center pc-only\">\n            <div className=\"glow-on-hover-img\">\n              <img\n                className=\"border-r24\"\n                loading=\"lazy\"\n                width=\"350\"\n                height=\"350\"\n                src={gif2}\n                alt=\"dev\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Faq;\n","import { useEffect, useMemo, useState, useCallback } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport { Parallax } from \"react-parallax\";\nimport bgimg from \"./assets/images/phara_bg.png\";\nimport gif1 from \"./assets/images/gif1.gif\";\nimport green_check from \"./assets/images/checkgreen.png\";\n\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n  getCollectionPDA,\n  SetupState,\n  createAccountsForMint,\n} from \"./candy-machine\";\nimport { AlertState, toDate, formatNumber, getAtaForMint } from \"./utilsweb\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { sendTransaction } from \"./connection\";\nimport Faq from \"./components/Faq\";\nimport styled from \"styled-components\";\n\nimport Button from \"@mui/material/Button\";\nimport { styled as mstyled } from \"@mui/material/styles\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport React from \"react\";\n\nconst BootstrapDialog = mstyled(Dialog)(({ theme }) => ({\n  \"& .MuiDialogContent-root\": {\n    padding: theme.spacing(2),\n  },\n  \"& .MuiDialogActions-root\": {\n    padding: theme.spacing(1),\n  },\n}));\n\nexport interface DialogTitleProps {\n  id: string;\n  children?: React.ReactNode;\n  onClose: () => void;\n}\n\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\n  const { children, onClose, ...other } = props;\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: \"absolute\",\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n};\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const [open, setOpen] = React.useState(false);\n  \n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log(\"There was a problem fetching whitelist token balance\");\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          let limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable\n          );\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount =\n          await cndy.program.provider.connection.getAccountInfo(collectionPDA);\n\n        setIsActive((cndy.state.isActive = active));\n        setIsPresale((cndy.state.isPresale = presale));\n        setCandyMachine(cndy);\n\n        const txnEstimate =\n          892 +\n          (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n          (cndy.state.tokenMint ? 177 : 0) +\n          (cndy.state.whitelistMintSettings ? 33 : 0) +\n          (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n          (cndy.state.gatekeeper ? 33 : 0) +\n          (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n              severity: \"error\",\n              noHide: true,\n            });\n          } else if (e.message.startsWith(\"failed to get info about account\")) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: \"error\",\n              noHide: true,\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: \"error\",\n            noHide: true,\n          });\n        }\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: \"error\",\n        noHide: true,\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection, props.rpcHost]);\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\",\n          });\n        }\n\n        let mintOne = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n        const mintTxId = mintOne[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          console.log('dsssssssss',candyMachine.state)\n          setOpen(true);\n        //   setAlertState({\n        //     open: true,\n        //     message: \"Congratulations! Mint succeeded!\",\n        //     severity: \"success\",\n        //   });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  return (\n    <>\n      <section id=\"home\">\n        <Container>\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12 mx-auto\">\n              <div className=\"row row-centered\">\n                {/* <div className=\"col-sm mx-auto\">\n                    <Image\n                      loading=\"lazy\"\n                      width=\"524\"\n                      height=\"262\"\n                      src=\"/logo_header.png\"\n                      alt=\"logo\"\n                    />\n                  </div> */}\n                <h1>Ducks born on the Solana Blockchain.</h1>\n              </div>\n            </div>\n            <div className=\"col-md-12 col-sm-12 col-xs-12 mx-auto mt-30\">\n              <div className=\"row\">\n                <div className=\"col-sm mx-auto\">\n                  <h3 className=\"animated-gradient-text2\">OUR STORY</h3>\n                  <p>\n                  2022 was the year. Ducks came together one by one until 3,333 ducks were born on a 16x16 pixel grid. Creating a sense of art flair, Mozart would of been proud. Bit Duckz like BitCoin looks to bring the decentralised pixel revolution onto the blockchain.\n                  </p>\n                </div>\n                <div className=\"col-sm mx-auto\">\n                  <div className=\"row row-centered\">\n                    <div className=\"col-sm mx-auto\">\n                      <div className=\"glow-on-hover-img\">\n                        <img\n                          className=\"mx-auto mint__image border-r24\"\n                          loading=\"lazy\"\n                          id=\"random\"\n                          src={gif1}\n                          alt=\"random nft\"\n                          width=\"350\"\n                          height=\"350\"\n                        />\n                      </div>\n                      <input\n                        autoFocus\n                        placeholder=\"Mint amount\"\n                        type=\"number\"\n                        // disabled={isMinting}\n                        className=\"mint-amount-input\"\n                        value={1}\n                        // onChange={(e) => setMintCount((e.target as any).value)}\n                      />\n                      <Container>\n                        <Container\n                          maxWidth=\"xs\"\n                          style={{ position: \"relative\" }}\n                        >\n                          {candyMachine && (\n                            <Grid\n                              container\n                              direction=\"row\"\n                              justifyContent=\"center\"\n                              wrap=\"nowrap\"\n                            >\n                              <Grid item xs={3}>\n                                <Typography\n                                  variant=\"body2\"\n                                  color=\"textSecondary\"\n                                >\n                                  Remaining\n                                </Typography>\n                                <Typography\n                                  variant=\"h6\"\n                                  color=\"textPrimary\"\n                                  style={{\n                                    fontWeight: \"bold\",\n                                  }}\n                                >\n                                  {`${itemsRemaining}`}\n                                </Typography>\n                              </Grid>\n                              <Grid item xs={4}>\n                                <Typography\n                                  variant=\"body2\"\n                                  color=\"textSecondary\"\n                                >\n                                  {isWhitelistUser && discountPrice\n                                    ? \"Discount Price\"\n                                    : \"Price\"}\n                                </Typography>\n                                <Typography\n                                  variant=\"h6\"\n                                  color=\"textPrimary\"\n                                  style={{ fontWeight: \"bold\" }}\n                                >\n                                  {isWhitelistUser && discountPrice\n                                    ? `◎ ${formatNumber.asNumber(\n                                        discountPrice\n                                      )}`\n                                    : `◎ ${formatNumber.asNumber(\n                                        candyMachine.state.price\n                                      )}`}\n                                </Typography>\n                              </Grid>\n                              <Grid item xs={5}>\n                                {isActive &&\n                                endDate &&\n                                Date.now() < endDate.getTime() ? (\n                                  <>\n                                    <MintCountdown\n                                      key=\"endSettings\"\n                                      date={getCountdownDate(candyMachine)}\n                                      style={{ justifyContent: \"flex-end\" }}\n                                      status=\"COMPLETED\"\n                                      onComplete={toggleMintButton}\n                                    />\n                                    <Typography\n                                      variant=\"caption\"\n                                      align=\"center\"\n                                      display=\"block\"\n                                      style={{ fontWeight: \"bold\" }}\n                                    >\n                                      TO END OF MINT\n                                    </Typography>\n                                  </>\n                                ) : (\n                                  <>\n                                    <MintCountdown\n                                      key=\"goLive\"\n                                      date={getCountdownDate(candyMachine)}\n                                      style={{\n                                        justifyContent: \"flex-end\",\n                                        background: \"green\",\n                                      }}\n                                      status={\n                                        candyMachine?.state?.isSoldOut ||\n                                        (endDate &&\n                                          Date.now() > endDate.getTime())\n                                          ? \"COMPLETED\"\n                                          : isPresale\n                                          ? \"PRESALE\"\n                                          : \"LIVE\"\n                                      }\n                                      onComplete={toggleMintButton}\n                                    />\n                                    {isPresale &&\n                                      candyMachine.state.goLiveDate &&\n                                      candyMachine.state.goLiveDate.toNumber() >\n                                        new Date().getTime() / 1000 && (\n                                        <Typography\n                                          variant=\"caption\"\n                                          align=\"center\"\n                                          display=\"block\"\n                                          style={{ fontWeight: \"bold\" }}\n                                        >\n                                          UNTIL PUBLIC MINT\n                                        </Typography>\n                                      )}\n                                  </>\n                                )}\n                              </Grid>\n                            </Grid>\n                          )}\n                          <MintContainer>\n                            {candyMachine?.state.isActive &&\n                            candyMachine?.state.gatekeeper &&\n                            wallet.publicKey &&\n                            wallet.signTransaction ? (\n                              <GatewayProvider\n                                wallet={{\n                                  publicKey:\n                                    wallet.publicKey ||\n                                    new PublicKey(CANDY_MACHINE_PROGRAM),\n                                  //@ts-ignore\n                                  signTransaction: wallet.signTransaction,\n                                }}\n                                gatekeeperNetwork={\n                                  candyMachine?.state?.gatekeeper\n                                    ?.gatekeeperNetwork\n                                }\n                                clusterUrl={rpcUrl}\n                                handleTransaction={async (\n                                  transaction: Transaction\n                                ) => {\n                                  setIsUserMinting(true);\n                                  const userMustSign =\n                                    transaction.signatures.find((sig) =>\n                                      sig.publicKey.equals(wallet.publicKey!)\n                                    );\n                                  if (userMustSign) {\n                                    setAlertState({\n                                      open: true,\n                                      message:\n                                        \"Please sign one-time Civic Pass issuance\",\n                                      severity: \"info\",\n                                    });\n                                    try {\n                                      transaction =\n                                        await wallet.signTransaction!(\n                                          transaction\n                                        );\n                                    } catch (e) {\n                                      setAlertState({\n                                        open: true,\n                                        message: \"User cancelled signing\",\n                                        severity: \"error\",\n                                      });\n                                      // setTimeout(() => window.location.reload(), 2000);\n                                      setIsUserMinting(false);\n                                      throw e;\n                                    }\n                                  } else {\n                                    setAlertState({\n                                      open: true,\n                                      message: \"Refreshing Civic Pass\",\n                                      severity: \"info\",\n                                    });\n                                  }\n                                  try {\n                                    await sendTransaction(\n                                      props.connection,\n                                      wallet,\n                                      transaction,\n                                      [],\n                                      true,\n                                      \"confirmed\"\n                                    );\n                                    setAlertState({\n                                      open: true,\n                                      message: \"Please sign minting\",\n                                      severity: \"info\",\n                                    });\n                                  } catch (e) {\n                                    setAlertState({\n                                      open: true,\n                                      message:\n                                        \"Solana dropped the transaction, please try again\",\n                                      severity: \"warning\",\n                                    });\n                                    console.error(e);\n                                    // setTimeout(() => window.location.reload(), 2000);\n                                    setIsUserMinting(false);\n                                    throw e;\n                                  }\n                                  await onMint();\n                                }}\n                                broadcastTransaction={false}\n                                options={{ autoShowModal: false }}\n                              >\n                                <MintButton\n                                  candyMachine={candyMachine}\n                                  isMinting={isUserMinting}\n                                  setIsMinting={(val) => setIsUserMinting(val)}\n                                  onMint={onMint}\n                                  isActive={\n                                    isActive || (isPresale && isWhitelistUser)\n                                  }\n                                />\n                              </GatewayProvider>\n                            ) : (\n                              <MintButton\n                                candyMachine={candyMachine}\n                                isMinting={isUserMinting}\n                                setIsMinting={(val) => setIsUserMinting(val)}\n                                onMint={onMint}\n                                isActive={\n                                  isActive || (isPresale && isWhitelistUser)\n                                }\n                              />\n                            )}\n                          </MintContainer>\n                        </Container>\n                        <Snackbar\n                          open={alertState.open}\n                          autoHideDuration={alertState.noHide ? null : 6000}\n                          onClose={() =>\n                            setAlertState({ ...alertState, open: false })\n                          }\n                        >\n                          <Alert\n                            onClose={() =>\n                              setAlertState({ ...alertState, open: false })\n                            }\n                            severity={alertState.severity}\n                          >\n                            {alertState.message}\n                          </Alert>\n                        </Snackbar>\n                      </Container>\n                    </div>\n                  </div>\n                  <br />\n                </div>\n              </div>\n            </div>\n            <BootstrapDialog\n              onClose={handleClose}\n              aria-labelledby=\"customized-dialog-title\"\n              open={open}\n            >\n              <BootstrapDialogTitle\n                id=\"customized-dialog-title\"\n                onClose={handleClose}\n              >\n                Mint Successfully\n              </BootstrapDialogTitle>\n              <DialogContent dividers>\n                <img\n                  className=\"mx-auto mint__image border-r24\"\n                  loading=\"lazy\"\n                  id=\"random\"\n                  src={green_check}\n                  alt=\"random nft\"\n                  width=\"350\"\n                  height=\"350\"\n                />\n                <div><a className=\"custom_a\" href=\"https://solscan.io/\" target=\"_blank\" rel=\"noreferrer\">see your tx on explorer</a></div>\n              </DialogContent>\n              <DialogActions>\n                <Button autoFocus onClick={handleClose}>\n                  Close\n                </Button>\n              </DialogActions>\n            </BootstrapDialog>\n          </div>\n        </Container>\n      </section>\n\n      {/* <Parallax blur={0} bgImage={bgimg} bgImageAlt=\"the cat\" strength={400}>\n        <div className=\"pharalex-text\"> \n          Lorem ipsum dolor sit amet\n        </div>\n      </Parallax> */}\n\n      <section id=\"mint\">\n        <Container>\n          <div className=\"row\">\n            <div className=\"col-md-12 col-sm-12 col-xs-12 mx-auto\">\n              <div className=\"col-md-12 col-sm-12 col-xs-12 mx-auto\">\n                <Slider\n                  dots={true}\n                  infinite={true}\n                  // nextArrow={<CustomArrow type={'next'}/>}\n                  // prevArrow={<CustomArrow type={'prev'} />}\n                  autoplay={true}\n                  speed={500}\n                  slidesToShow={3}\n                  slidesToScroll={1}\n                  responsive={[\n                    {\n                      breakpoint: 1200,\n                      settings: {\n                        slidesToShow: 3,\n                        slidesToScroll: 3,\n                      },\n                    },\n                    {\n                      breakpoint: 1024,\n                      settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 2,\n                      },\n                    },\n                    {\n                      breakpoint: 768,\n                      settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1,\n                      },\n                    },\n                  ]}\n                >\n                  <div className=\"text-center\">\n                    <div className=\"glow-on-hover-img\">\n                      <img\n                        className=\"border-r24\"\n                        loading=\"lazy\"\n                        width=\"350\"\n                        height=\"350\"\n                        src=\"https://s3.eu-central-1.wasabisys.com/somefiles/wormsol/0.png\"\n                        alt=\"dev\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"glow-on-hover-img\">\n                      <img\n                        className=\"border-r24\"\n                        loading=\"lazy\"\n                        width=\"350\"\n                        height=\"350\"\n                        src=\"https://s3.eu-central-1.wasabisys.com/somefiles/wormsol/1.png\"\n                        alt=\"dev\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"glow-on-hover-img\">\n                      <img\n                        className=\"border-r24\"\n                        loading=\"lazy\"\n                        width=\"350\"\n                        height=\"350\"\n                        src=\"https://s3.eu-central-1.wasabisys.com/somefiles/wormsol/2.png\"\n                        alt=\"dev\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"glow-on-hover-img\">\n                      <img\n                        className=\"border-r24\"\n                        loading=\"lazy\"\n                        width=\"350\"\n                        height=\"350\"\n                        src=\"https://s3.eu-central-1.wasabisys.com/somefiles/wormsol/3.png\"\n                        alt=\"dev\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"glow-on-hover-img\">\n                      <img\n                        className=\"border-r24\"\n                        loading=\"lazy\"\n                        width=\"350\"\n                        height=\"350\"\n                        src=\"https://s3.eu-central-1.wasabisys.com/somefiles/wormsol/4.png\"\n                        alt=\"dev\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"glow-on-hover-img\">\n                      <img\n                        className=\"border-r24\"\n                        loading=\"lazy\"\n                        width=\"350\"\n                        height=\"350\"\n                        src=\"https://s3.eu-central-1.wasabisys.com/somefiles/wormsol/5.png\"\n                        alt=\"dev\"\n                      />\n                    </div>\n                  </div>\n                </Slider>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </section>\n\n      <Parallax blur={0} bgImage={bgimg} bgImageAlt=\"the cat\" strength={400}>\n        <div className=\"pharalex-text\">Lorem ipsum dolor sit amet</div>\n      </Parallax>\n\n      <section id=\"faq\">\n        <Container>\n          <Faq />\n        </Container>\n      </section>\n\n      {/* <section id=\"team\">\n        <Container>\n          <Team />\n        </Container>\n      </section> */}\n    </>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/logo.f957c733.png\";","import {\n  DropdownButton,\n  Dropdown,\n  Button,\n  Navbar,\n  Container,\n  Nav,\n} from \"react-bootstrap\";\nimport { BsTwitter, BsDiscord } from \"react-icons/bs\";\nimport { Link } from \"react-router-dom\"\nimport logo from \"../assets/images/logo.png\";\nimport { useState } from \"react\";\n\n\nimport '@solana/wallet-adapter-react-ui/styles.css';\nimport { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\n\nconst Header = () => {\n\n  const [colorChange, setColorchange] = useState(false);\n  const changeNavbarColor = () => {\n    if (window.scrollY >= 80) {\n      setColorchange(true);\n    } else {\n      setColorchange(false);\n    }\n  };\n  window.addEventListener(\"scroll\", changeNavbarColor);\n\n  return (\n    <header className={colorChange ? \"header colorChange\" : \"header\"}>\n      <Navbar id=\"navbar\" expand=\"lg\">\n        <Container>\n          <Navbar.Brand\n            href=\"/\"\n            className=\"site-logo navbar-brand\"\n            title=\"back to index\"\n          >\n            <img\n              loading=\"lazy\"\n              width=\"100%\"\n              height=\"100%\"\n              src={logo}\n              alt=\"brand logo\"\n            />\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"navbar-nav\">\n              {/* <DropdownButton\n                className=\"nav-link\"\n                id=\"navbarDropdownMenuNFT\"\n                title=\"NFT\"\n              >\n                <Dropdown.Item href=\"#mint\">Mint</Dropdown.Item>\n                <Dropdown.Item href=\"#faq\">FAQ</Dropdown.Item>\n              </DropdownButton> */}\n              <Nav.Item className=\"nav-link\">\n                <Link to=\"/\">\n                  <Button\n                    role=\"button\"\n                    aria-expanded=\"false\">\n                    Home\n                  </Button>\n                </Link>\n              </Nav.Item>\n              <Nav.Item className=\"nav-link\">\n                <Link to=\"/nfts\">\n                  <Button\n                    role=\"button\"\n                    aria-expanded=\"false\">\n                    MyNFT\n                  </Button>\n                </Link>\n              </Nav.Item>\n              <DropdownButton\n                id=\"navbarDropdownSocialMedia\"\n                title=\"Social Media\"\n                className=\"nav-link\"\n              >\n                <Dropdown.Item\n                  href=\"https://twitter.com/bitduckz\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  <BsTwitter style={{padding:\"1px\",margin:\" 0px 5px 5px 0px\"}}/>\n                  Twitter\n                </Dropdown.Item>\n                <Dropdown.Item\n                  href=\"https://twitter.com/bitduckz\"\n                  rel=\"noopener noreferrer\" \n                  target=\"_blank\"\n                >\n                  <BsDiscord style={{padding:\"1px\",margin:\" 0px 5px 5px 0px\"}}/>\n                  Discord\n                </Dropdown.Item>\n              </DropdownButton>\n                \n              {/* <Nav.Item className=\"nav-link\">\n                <Link to=\"/nfts\">\n                  <Button\n                    role=\"button\"\n                    aria-expanded=\"false\">\n                    My NFT\n                  </Button>\n                </Link>\n              </Nav.Item> */}\n              <Nav.Item className=\"nav-link\">\n                <WalletMultiButton />\n              </Nav.Item>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </header>\n  );\n};\n\nexport default Header;\n","import { BsTwitter, BsDiscord } from \"react-icons/bs\";\n\nconst Footer = () => {\n  const year = new Date().getFullYear();\n\n  return (\n    <footer className=\"bg-gradient1\">\n      <div className=\"container text-center\">\n        <div className=\"row\">\n          <div className=\"col-lg-12 col-sm-12 col-xs-12 mb-5\">\n            <br />\n            <div>\n                <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://twitter.com/bitduckz\"><BsTwitter style={{padding:\"1px\",margin:\" 0px 100px 5px 0px\",color:'blue', width:'60px', height:'60px'}}/></a>\n                <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://twitter.com/bitduckz\"><BsDiscord style={{padding:\"1px\",margin:\" 0px 5px 5px 100px\",color:'purple', width:'60px', height:'60px'}}/></a>\n            </div>\n            <br />\n            <h2 className=\"animated-gradient-text2\">Project Bit Duckz</h2>\n            <br />\n            <h3 className=\"animated-gradient-text2\">\n              © All right reserved {year}.\n            </h3>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nexport default function AnNFT({ nft }: any) {\n  // useEffect(() => {\n  //   console.log(nft);\n  // }, []);\n  return (\n    <div className=\"col-lg-12 col-sm-12 col-xs-12\">\n      <div className=\"row mynft__collention\">\n        <div className=\"col-lg-6 col-sm-12 col-xs-12\">\n          <div className=\"glow-on-hover-img\">\n            <img className=\"mynft__image\" src={nft.image} alt={nft.description || nft.name} />\n          </div>\n        </div>\n        <div className=\"col-lg-6 col-sm-12 col-xs-12\">\n          <div >\n            <p>Name: {nft.name}</p>\n          </div>\n          <div>\n            <p>Attributes</p>\n            <hr />\n            {(nft.attributes as any).map((item: any, i: number) => {\n              return <p key={i}> {item.value} | {item.trait_type} </p>;\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useWallet } from \"@solana/wallet-adapter-react\";\nimport { useEffect, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { getNFTsForOwner } from \"../candy-machine\";\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst useWalletNfts = () => {\n  const wallet = useWallet();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [nfts, setNfts] = useState<Array<any>>([]);\n\n  useEffect(() => {\n    (async () => {\n      if (\n        !wallet ||\n        !wallet.publicKey ||\n        !wallet.signAllTransactions ||\n        !wallet.signTransaction\n      ) {\n        return;\n      }\n\n      setIsLoading(true);\n      const nftsForOwner = await getNFTsForOwner(connection, wallet.publicKey);\n      setNfts(nftsForOwner as any);\n      setIsLoading(false);\n    })();\n  }, [wallet]);\n\n  return [isLoading, nfts];\n};\n\nexport default useWalletNfts;\n","import React from \"react\";\nimport AnNFT from \"./AnNFT\";\nimport useWalletNfts from \"../hooks/useWalletNFTs\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\n\n\nconst MyNFT = () => {\n\n    const [isLoading, nfts] = useWalletNfts();\n    return (\n        <div id=\"myNft\" className=\"container text-center\">\n            <div className=\"row\">\n                <div className=\"col-lg-12 col-sm-12 col-xs-12 mb-5\">\n                <h2></h2>\n                    <div className=\"row\">\n                        {isLoading ? (\n                            <>\n                                <Box sx={{ display: 'flex' }} className=\"justify-content-center\">\n                                    <CircularProgress color=\"success\" className=\"nft__loading\" />\n                                </Box>\n                                <p>Extracting data from the solana network may take a few seconds, please wait.</p>\n                            </>\n                        )\n                            :\n                        \n                            (nfts as any[]).length > 0 ? (\n                                <>\n                                    {(nfts as any).map((nft: any, i: number) => {\n                                        return <AnNFT key={i} nft={nft} />;\n                                    })}\n                                </>\n                            ) : (\n                                <p>You dont have any NFT to show yet.</p>\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MyNFT;\n\n","import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport Home from './Home';\nimport { DEFAULT_TIMEOUT } from './connection';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\n\nimport { ThemeProvider, createTheme } from '@material-ui/core';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport MyNFT from './components/MyNFT';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n  \n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletModalProvider>\n            <BrowserRouter>\n            <Header></Header>\n            <Routes>\n              <Route path='/' \n                element={\n                  <Home\n                    candyMachineId={candyMachineId}\n                    connection={connection}\n                    txTimeout={DEFAULT_TIMEOUT}\n                    rpcHost={rpcHost}\n                  />\n                }> \n              </Route>\n              <Route path='/nfts' \n                element={\n                  <MyNFT></MyNFT>\n                }> \n              </Route>\n            </Routes>\n            <Footer />\n            </BrowserRouter>\n          </WalletModalProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  noHide?: boolean;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import * as anchor from '@project-serum/anchor';\nimport { Metadata } from \"@metaplex/js\";\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utilsweb';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        [],\n        [],\n      )\n    ).txs[0].txid,\n  };\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState,\n): Promise<string[]> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const cleanupInstructions = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log('SetupState: ', setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span,\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer,\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1,\n        ),\n      ],\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions, cleanupInstructions];\n  const signersMatrix = [signers, []];\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions,\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport async function getNFTsForOwner(\n  connection: anchor.web3.Connection,\n  ownerAddress: anchor.web3.PublicKey\n) {\n  // const allMintsCandyMachine = await fetchHashTable(\n  //     process.env.REACT_APP_CANDY_MACHINE_ID!\n  // );\n  const allTokens = [];\n  const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      ownerAddress,\n      {\n          programId: TOKEN_PROGRAM_ID,\n      }\n  );\n  for (let index = 0; index < tokenAccounts.value.length; index++) {\n      const tokenAccount = tokenAccounts.value[index];\n      const tokenAmount = tokenAccount.account.data.parsed.info.tokenAmount;\n      if (\n          tokenAmount.amount === \"1\" &&\n          tokenAmount.decimals === 0\n      ) {\n          let [pda] = await anchor.web3.PublicKey.findProgramAddress(\n              [\n                  Buffer.from(\"metadata\"),\n                  TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                  new anchor.web3.PublicKey(\n                      tokenAccount.account.data.parsed.info.mint\n                  ).toBuffer(),\n              ],\n              TOKEN_METADATA_PROGRAM_ID\n          );\n          const accountInfo: any = await connection.getParsedAccountInfo(pda);\n          \n          const metadata: any = new Metadata(\n              ownerAddress.toString(),\n              accountInfo.value\n          );\n          if (metadata.data.data.symbol === 'Bit Duckz') {\n            const dataRes = await fetch(metadata.data.data.uri);\n            if (dataRes.status === 200) {\n              console.log({dataRes})\n                allTokens.push(await dataRes.json());\n            }\n          }\n      }\n  }\n\n  return allTokens;\n}"],"sourceRoot":""}